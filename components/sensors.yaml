  - platform: buienradar
    name: Weather
    monitored_conditions:
      - stationname
      - condition
      - conditiondetailed
      - symbol
      - humidity
      - temperature
      - windforce
      - winddirection
      - precipitation

  # - platform: netatmo_public
  #   name: Local Weather
  #   areas:
  #     - lat_ne: !secret lat_ne
  #       lon_ne: !secret long_ne
  #       lat_sw: !secret lat_sw
  #       lon_sw: !secret long_sw

  - platform: systemmonitor
    resources:
      - type: last_boot
      - type: memory_use_percent
      - type: disk_use_percent
        arg: /

  - platform: uptime
    unit_of_measurement: minutes

  - platform: cpuspeed

  - platform: speedtest
    monitored_conditions:
      - ping
      - download
      - upload

  - platform: dnsip

  - platform: sonarr
    api_key: !secret sonarr_api_key
    monitored_conditions:
      - series
      - upcoming
      - wanted
      - queue
      - commands 
      - diskspace
    days: 2
    include_paths:
      - /content
    unit: TB
    
  - platform: postnl
    username: !secret postnl_un
    password: !secret postnl_pw

  - platform: ups
    username: !secret ups_username
    password: !secret ups_password

  - platform: hue
    ip_address: !secret hue_ip
    token: !secret hue_key

  # - platform: rest
  #   resource: !secret hue_light_level
  #   value_template: '{{ value_json.state.lightlevel }}'
  #   unit_of_measurement: Lux
  #   name: 'Light Level'

  # - platform: rest
  #   resource: !secret hue_temperature
  #   value_template: '{{ value_json.state.temperature | float / 100 }}'
  #   unit_of_measurement: °C
  #   name: 'Temperature'

  # - platform: google_travel_time
  #   name: Eduard naar huis
  #   api_key: !secret google_api_key
  #   origin: device_tracker.eduards_iphone
  #   destination: zone.home
  #   options:
  #     mode: driving
  # - platform: google_travel_time
  #   name: Huis naar Werk
  #   api_key: !secret google_api_key
  #   origin: zone.home
  #   destination: zone.work
  #   options:
  #     mode: driving
  # - platform: google_travel_time
  #   name: Werk naar Huis
  #   api_key: !secret google_api_key
  #   origin: zone.work
  #   destination: zone.home
  #   options:
  #     mode: driving

  - platform: alpha_vantage
    api_key: !secret alpha_vantage_key
    symbols:
    - symbol: MSFT
      name: Microsoft
    # - symbol: GOOGL
    #   name: Google
    # - symbol: AAPL
    #   name: Apple
    # - symbol: AMZN
    #   name: Amazon
    # foreign_exchange:
    # - name: USD_EUR
    #   from: USD
    #   to: EUR
  
  - platform: plex
    host: 192.168.2.2
    port: 80
    token: !secret plex_token

  - platform: command_line
    name: "PyPi HASS Version"
    command: python3 -c "import requests; print(requests.get('https://pypi.python.org/pypi/homeassistant/json').json()['info']['version'])"

  - platform: version

  - platform: statistics
    name: Bathroom Humidity Stats
    entity_id: sensor.bathroom_relative_humidity
    max_age:
      minutes: 45

  - platform: history_stats
    name: People in Kitchen Ratio
    entity_id: sensor.kitchen_motion_sensor
    state: 'on'
    type: ratio
    end: '{{ now() }}'
    duration: 
      minutes: 10

  - platform: statistics
    name: People In Kitchen
    entity_id: sensor.people_in_kitchen_ratio
    max_age:
      minutes: 120

  - platform: template
    sensors:
      # sonos_volume:
      #   value_template: "{{ [ states.media_player.bedroom.attributes.volume_level, states.media_player.bathroom.attributes.volume_level ] | min }}"
      # sonos_master:
      #   value_template: >-
      #     {% if is_state_attr('media_player.bedroom', 'is_coordinator', true) %}
      #       media_player.bedroom
      #     {% else %}
      #       media_player.bathroom
      #     {% endif %}
      plex_playing_movies:
        value_template: >- 
          {{ is_state_attr('media_player.plex_plex_sn16y90mhqpsit50ds4iuvc3', 'media_library_name', 'Movies' ) }}
      plex_playing_series:
        value_template: >- 
          {{ is_state_attr('media_player.plex_plex_sn16y90mhqpsit50ds4iuvc3', 'media_library_name', 'Series' ) }}
      blind_position:
        friendly_name: 'Blind Position'
        value_template: "{{ states.cover.blind.attributes.current_position | int}}"
        unit_of_measurement: "%"
        icon_template: mdi:blinds
      new_blind_position:
        value_template: >-
            {%- set elevation = states.sun.sun.attributes.elevation | float -%}
            {%- set azimuth = states.sun.sun.attributes.azimuth | float -%}
            {%- set temp_out = states.sensor.weather_temperature.state | float -%}
            {%- set temp_in = states.sensor.temperature.state | float -%}
            {%- set clear = is_state('input_boolean.clear_day', 'on') -%}
            {%- set add = (temp_in - 22, 1) | max -%}
            {%- set sun_pos = azimuth > 225 and azimuth < 286 -%}
            {%- set sun_ele = elevation > 1.4 -%}
            {%- set factor = (temp_out - 19, 1) | max -%}
            {%- set temp = temp_in >= 22 and temp_out >= 19 -%}
            {%- set tv_on = not(is_state('media_player.tv', 'off')) -%}
            {%- if sun_pos and sun_ele and (temp or tv_on) and clear -%}
            {{ ([[ elevation - (add*factor) | round | int, 100] |min, 0] |max) | int }}
            {%- else -%}
            {{ 100 }}
            {%- endif -%}
        unit_of_measurement: "%"
        icon_template: mdi:blinds
      total_packages:
        friendly_name: Total packages
        unit_of_measurement: 'packages'
        value_template: "{{ states('sensor.postnl')|int + states('sensor.ups')|int }}"
      hassuptime:
          friendly_name: "HASS Uptime"
          value_template: >-
            {% set uptime = states.sensor.uptime.state | round %}
            {% set minutes = (uptime % 60) | int %}
            {% set hours = ((uptime / 60) % 24) | int %}
            {% set days = (uptime / 1440) | int %}
            {%- if days > 0 -%}
              {%- if days == 1 -%}
                1 day
              {%- else -%}
                {{ days }} days
              {%- endif -%}
              {{ ', ' }}
            {%- endif -%}
            {{ '%02d' % hours }}:{{ '%02d' % minutes }} hrs
      coinbase_btc:
        friendly_name: Coinbase Bitcoin Value
        value_template: "{{ states.sensor.coinbase_btc_wallet.attributes['Balance in native currency']|replace(' EUR', '')|float }}"
        unit_of_measurement: 'EUR'
        icon_template: '{{ states.sensor.coinbase_btc_wallet.attributes.icon }}'
      coinbase_eth:
        friendly_name: Coinbase Ethereum Value
        value_template: "{{ states.sensor.coinbase_eth_wallet.attributes['Balance in native currency']|replace(' EUR', '')|float }}"
        unit_of_measurement: 'EUR'
        icon_template: '{{ states.sensor.coinbase_btc_wallet.attributes.icon }}'
      coinbase_ltc:
        friendly_name: Coinbase Litecoin Value
        value_template: "{{ states.sensor.coinbase_ltc_wallet.attributes['Balance in native currency']|replace(' EUR', '')|float }}"
        unit_of_measurement: 'EUR'
        icon_template: '{{ states.sensor.coinbase_btc_wallet.attributes.icon }}'
      coinbase_total:
        friendly_name: Coinbase Total Value
        value_template: '{{ states("sensor.coinbase_btc")|float + states("sensor.coinbase_eth")|float + states("sensor.coinbase_ltc")|float }}'
        unit_of_measurement: 'EUR'
        icon_template: '{{ states.sensor.coinbase_btc_wallet.attributes.icon }}'
      temperature:
        friendly_name: 'Temperature'
        value_template: '{{(states.sensor.kitchen_motion_sensor.attributes.temperature)  | round(1)}}'
        unit_of_measurement: °C
      kitchen_light_level:
        friendly_name: 'Kitchen Light level'
        value_template: '{{ (10**((states.sensor.kitchen_motion_sensor.attributes.light_level - 1) /10000)) | round(1)}}'
        unit_of_measurement: lux
      living_light_level:
        friendly_name: 'Living Room Light level'
        value_template: '{{ states.sensor.living_room_luminance.state | round(1)}}'
        unit_of_measurement: lux
      resume_music:
        friendly_name: Resume the music when the TV turns off
        value_template: "{{ is_state('input_boolean.resume_music', 'on') }}"
        icon_template: >-
          {% if is_state('input_boolean.resume_music', 'on') %}
            mdi:music-note
          {% else %}
            mdi:music-note-off
          {% endif %}
      sun_elevation:
        value_template: '{{ states.sun.sun.attributes.elevation | float }}'
        unit_of_measurement: 'º'
      sun_azimuth:
        value_template: '{{ states.sun.sun.attributes.azimuth | float }}'
        unit_of_measurement: 'º'
      microsoft_stock:
        friendly_name: Microsoft Stock value
        value_template: "{{ (states('sensor.microsoft') | float) * (states('input_number.microsoft_stock') | float) | round }}"
        unit_of_measurement: USD
        icon_template: mdi:microsoft
